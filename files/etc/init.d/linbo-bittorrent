#!/bin/sh

### BEGIN INIT INFO
# Provides:          linbo-bittorrent
# Required-Start:    $network $local_fs
# Required-Stop:     $network $local_fs
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start a complete bittorrent download
# Description:       Starts a complete bittorrent download for LINBO images
### END INIT INFO

# thomas@linuxmuster.net
# 20210423
# GPL v3

#set -e

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="ctorrent service for"

# lmn7 specific paths
. /usr/share/linuxmuster/defaults.sh || exit 1
DAEMON=$LINBOSHAREDIR/linbo-torrenthelper.sh
. $LINBOSHAREDIR/helperfunctions.sh || exit 1

# Gracefully exit if the package has been removed.
test -x $DAEMON || exit 0

# read cmdline
action="$1"
images="$2"
force="$3"

cd $LINBODIR

# check if single image file is given on cmdline
if [ -n "$images" -a "$images" != "all" ]; then
  if [ ! -s "$images" ]; then
    echo "$images does not exist!"
    exit 1
  fi
  omit_killall="yes"
else
  # get all active images from helperfunctions
  images="$(active_images)"
  if [ -z "$images" ]; then
    echo "There exist no images yet!"
    exit 0
  fi
fi

start(){

  local RC=0
  local c=0

  # read server ip
  serverip="$(grep ^Server "$LINBODIR/start.conf" | awk -F\= '{ print $2 }' | awk '{ print $1 }')"

  # check and create torrents first
  local i=""
  local tfile=""
  local tname=""
  for i in $images; do
    tfile="$i.torrent"
    tname="$(basename $tfile)"
    # check torrent file and delete it if it does not match with image
    if [ -e "$tfile" ]; then
      if ! check_torrent "$i"; then
        echo "$i and $tfile do not match!"
        rm -f "$tfile"
      fi
    fi
    # create torrent files if necessary
    [ ! -e "$tfile" -o "$force" = "force" ] && create_torrent "$i" "$serverip" "$PORT"
  done

  # restart tracker
  /etc/init.d/bittorrent stop
  killall bttrack.bittorrent &> /dev/null
  /etc/init.d/bittorrent start

  # start torrents
  for i in $images; do
    tfile="$i.torrent"
    tname="$(basename $tfile)"

    # start torrent daemon for image only if torrent file is present
    [ -e "$tfile" ] || continue

    # start daemon stuff
    echo -n "Starting $DESC $i ... "

    if screen -list | grep -qw "$tname"; then
      echo "already running. Skipped!"
      continue
    fi

    OPTIONS="$tfile \
      --minport $MINPORT \
      --max_uploads $MAX_UPLOADS \
      --max_upload_rate $MAX_UPLOAD_RATE \
      --rerequest_interval $REREQUEST_INTERVAL \
      --min_peers $MIN_PEERS \
      --max_initiate $MAX_INITIATE \
      --keepalive_interval $KEEPALIVE_INTERVAL \
      --download_slice_size $DOWNLOAD_SLICE_SIZE \
      --request_backlog $REQUEST_BACKLOG \
      --max_message_length $MAX_MESSAGE_LENGTH \
      --timeout $TIMEOUT \
      --timeout_check_interval $TIMEOUT_CHECK_INTERVAL \
      --max_rate_period $MAX_RATE_PERIOD \
      --upload_rate_fudge $UPLOAD_RATE_FUDGE \
      --display_interval $DISPLAY_INTERVAL \
      --max_slice_length $MAX_SLICE_LENGTH \
      --check_hashes 0 \
      --saveas $i"
    screen -dmS "$tname" $DAEMON $OPTIONS
    sleep 1
    if ! screen -list | grep -qw "$tname"; then
      RC=1
      echo "failed!"
    else
      RC=0
      echo "done!"
    fi
  done
}

stop(){

  local i=""
  local pid=""
  for i in $images; do
    if screen -list | grep -qw "$(basename $i.torrent)"; then
      echo -n "Stopping $DESC $i ... "
      pid="$(screen -list | grep "$(basename $i.torrent)" | awk -F\. '{ print $1 }' | awk '{ print $1 }')"
      kill $pid ; RC="$?"
      if [ "$RC" = "0" ]; then
        echo "done!"
      else
        echo "failed!"
      fi
    fi
  done
  if [ -z "$omit_killall" ]; then
    local pids="$(screen -list | grep torrent | awk -F\. '{ print $1 }' | awk '{ print $1 }')"
    if [ -n "$pids" ]; then
      echo -n "Sending all remaining linbo-bittorrent processes the TERM signal ... "
      kill $pids ; RC="$?"
      if [ "$RC" = "0" ]; then
        echo "done!"
      else
        echo "failed!"
      fi
    fi
  fi
}

status(){
  local line=""
  local pid=""
  local screen=""
  local status=""
  local c=0
  local d=""
  screen -wipe | grep -w .torrent | while read line; do
    let c+=1
    pid="$(echo $line | awk -F\. '{ print $1 }' | awk '{ print $1 }')"
    screen="$(echo $line | awk '{ print $1 }')"
    screen="${screen#*.}"
    status="$(echo $line | awk '{ print $2 }')"
    d=""
    [ $c -lt 100 ] && d=" "
    [ $c -lt 10 ] && d="  "
    echo -e "$d$c\t$pid\t$screen\t$status"
  done
}

case "$action" in
  start) start ;;
  stop) stop ;;
  restart)
    stop
    #sleep 2
    start ;;
  status) status ;;
  *)
    echo "Usage: $0 {status} | {start|stop|restart} [<imagefile>|all] [force]" >&2
    exit 1 ;;
esac

exit 0

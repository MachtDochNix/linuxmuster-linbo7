#!/bin/bash
#
# starts screen process for each valid torrent in LINBODIR
# thomas@linuxmuster.net
# 20210517
#

# read environment
. /usr/share/linuxmuster/defaults.sh || exit 1
THELPER=$LINBOSHAREDIR/linbo-torrenthelper.sh
. $LINBOSHAREDIR/helperfunctions.sh || exit 1

# change to LINBODIR
cd $LINBODIR

# help message
usage(){
  echo
  echo "Usage: $0 <start|stop|restart|reload|status|create|check> [torrent_file]"
  echo
  echo "Note:"
  echo " * The commands start, stop and restart may have optionally a torrent file"
  echo "   as parameter. So the command is only processed to this certain file."
  echo " * A torrent file parameter is mandatory with the commands create and check."
  echo
  exit 1
}

# check if torrent file is given
if [ -n "$2" ]; then
  # torrent file must have the correct extension
  if [ "${2##*.}" != "torrent" ]; then
    echo "$2 is not a torrent file!"
    usage
  fi
  # corresponding image file must exist
  image="${2/.torrent/}"
  if [ ! -s "$image" ]; then
    echo "Image file is missing!"
    usage
  fi
  case "$1" in
    create)
      # in case of create the torrent file and may not already exist
      if [ -e "$2" ]; then
        echo "$2 exists already!"
        usage
      fi
      ;;
    start|stop|restart|check)
      # torrent file must exist
      if [ ! -s "$2" ]; then
        echo "$2 does not exist!"
        usage
      fi
      ;;
    reload|status)
      echo "Command $1 with torrent file is not supported!"
      usage
      ;;
    *) ;;
  esac
  TORRENTS="$2"
else
  TORRENTS="$(ls -1 *.torrent)"
fi
if [ -z "$TORRENTS" ]; then
  echo "There are no torrent files to process."
  exit 0
fi

# check for torrent screen and return pid
torrent_pid(){
  local torrent="$1"
  local process="$(screen -ls | grep -w $torrent)"
  [ -z "$process" ] && return 0
  # print pid if there is any
  echo "$process" | awk -F\. '{print $1}' | awk '{print $1}'
}

# killing torrent screen
kill_torrent(){
  local torrent="$1"
  local pid="$(torrent_pid "$torrent")"
  [ -z "$pid" ] && return 0
  kill "$pid"
  pid="$(torrent_pid "$torrent")"
  if [ -z "$pid" ]; then
    echo "Screen process for $torrent terminated. "
    return 0
  else
    echo "Failed to terminate screen process for $torrent."
    return 1
  fi
}

# reloading running ctorrent processes
reload(){
  local torrent
  local pid
  local line
  local array
  local num
  local pos
  local RC
  # iterate over torrenthelper processes
  ps ax | grep -v grep | grep -w ctorrent | grep -w torrent | while read line; do
    read -ra array <<< "$line"
    pid="${array[0]}"
    num=${#array[@]}
    pos=$(( $num - 1 ))
    torrent="${array[$pos]}"
    echo -n "Reloading $torrent ... "
    RC=0
    kill "$pid" || RC=1
    if [ "$RC" = "0" ]; then
      echo "Ok!"
    else
      echo "Failed!"
    fi
  done
}

# check torrent
check(){
  local torrent="$TORRENTS"
  echo "Checking $torrent ..."
  if ctorrent -c "$torrent"; then
    echo "Ok!"
  else
    echo "Failed!"
    exit 1
  fi
}

# creates torrent files
create(){
  local torrent="$TORRENTS"
  local pid
  local image
  # skip already running torrents
  pid="$(torrent_pid "$torrent")"
  if [ -n "$pid" ]; then
    echo "$torrent is already running."
    return 1
  else
    echo "Creating $torrent ..."
    image="${torrent/.torrent/}"
    if ctorrent -t -u "http://$serverip:6969/announce" -s "$torrent" "$image" ; then
      echo "Ok!"
      linbo-torrent start "$torrent"
    else
      echo "Failed!"
      exit 1
    fi
  fi
}

# starts torrent screen processes
start(){
  local torrent
  local pid
  for torrent in $TORRENTS; do
    # skip already running torrents
    pid="$(torrent_pid "$torrent")"
    if [ -n "$pid" ]; then
      echo "$torrent is already running."
      continue
    else
      echo -n "Starting screen process for $torrent ... "
      screen -dmS "$torrent" "$THELPER" "$torrent"
      sleep 1
      pid="$(torrent_pid "$torrent")"
      if [ -n "$pid" ]; then
        echo "$pid ... Ok!"
      else
        echo "Failed!"
      fi
    fi
  done
}

stop(){
  local torrent
  for torrent in $TORRENTS; do
    kill_torrent "$torrent"
  done
}

status(){
  screen -ls | grep -w torrent
}

case "$1" in
  start) start ;;
  stop) stop ;;
  restart) stop ; start ;;
  reload) reload ;;
  status) status ;;
  create) create ;;
  check) check ;;
  *) usage ;;
esac

exit 0
